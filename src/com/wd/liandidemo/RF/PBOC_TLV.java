package com.wd.liandidemo.RF;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import cn.wonders.pos_qdg.util.LogUtil;
import cn.wonders.pos_qdg.util.StringUtils;

public class PBOC_TLV {

    private static String CardNumber;

	//eg. tlv="9F36020B889F270180" return {9F27=80, 9F36=0B88}
    public static Map decodingTLV(List list) {
        Map map = new HashMap();
        for(int i = 0; i < list.size(); i++) {
            String[] tlv = (String[]) list.get(i);
            map.put(tlv[0], tlv[2]);
        }
        return map;
    }

    //eg. tlv="9F36020B889F270180" return {[9F36,02,0B88], [9F27,01,80]}
    public static List decodingTLV(String str) {
        if (str == null || str.length() % 2 != 0) {
            throw new RuntimeException("Invalid tlv, null or odd length");
        }
        List ls = new ArrayList();
        for (int i = 0; i < str.length();) {
            try {
                String tag = str.substring(i, i = i + 2);
                // extra byte for TAG field
                if ((Integer.parseInt(tag, 16) & 0x1F) == 0x1F) {
                    tag += str.substring(i, i = i + 2);
                }
                String len = str.substring(i, i = i + 2);
                int length = Integer.parseInt(len, 16);
                // more than 1 byte for length
                if (length > 128) {//临界值，当是128即10000000时，长度还是一位，而不是两位
                    int bytesLength = length - 128;
                    	len = str.substring(i, i = i + (bytesLength * 2));
                    	if (StringUtils.checkHexNum(len)&&len.length()<=2) {
                    		LogUtil.i("len数值： "+len);
                    		length = Integer.parseInt(len, 16);
						}else{
							LogUtil.e("读卡时出现错误，消费失败");
							return null;
						}
                }
//                if (length > 128) {//临界值，当是128即10000000时，长度还是一位，而不是两位
//                	int bytesLength = length - 128;
//                	len = str.substring(i, i = i + (bytesLength * 2));
//                	length = Integer.parseInt(len, 16);
//                }
                length *= 2;
                String value = str.substring(i, i = i + length);
                LogUtil.i("tag:" + tag + " len:" + len + " value:" + value);
                ls.add(new String[] {tag, len, value});
            } catch (NumberFormatException e) {
                throw new RuntimeException("Error parsing number", e);
            } catch (IndexOutOfBoundsException e) {
                throw new RuntimeException("Error processing field", e);
            }
        }
        return ls;
    }

    public static String encodingTLV(Map tlvMap) {
        String str = "";
        Iterator iter = tlvMap.entrySet().iterator();
        String tag = "";
        String length = "";
        String value = "";
        Entry entry;
        while (iter.hasNext()) {
            entry = (Entry) iter.next();
            tag = (String) entry.getKey();
            value = (String) entry.getValue();
            length = String.valueOf(Integer.parseInt(String.valueOf(value.length() / 2), 16));
            str += tag + length + value;
        }
        return str;
    }

    public static String encodingTLV(List tlvList) {
        String str = "";
        for(int i = 0; i < tlvList.size(); i++) {
            String[] tlv = (String[]) tlvList.get(i);
            str += tlv[0] + tlv[1] + tlv[2];
        }
        return str;
    }

    public static void main(String[] args) {
//        String ss = "82027C00940C1801060130010100200202009F360200FB9F260884727BA346DB7C439F101307010103900000010A01000002129948D3E53857136231700190000013539D26012200000000724F5F3401019F6C0200009000";
        String ss
        List listTLV = PBOC_TLV.decodingTLV(ss);
        Map mapTLV = PBOC_TLV.decodingTLV(listTLV);
//        String encodingList = PBOC_TLV.encodingTLV(listTLV);
        String encodingMap = PBOC_TLV.encodingTLV(mapTLV);
//        System.out.println(listTLV);
        System.out.println(mapTLV);
        
       
        
    }
}